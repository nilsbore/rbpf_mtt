<launch>

    <arg name="map"/>
    <arg name="db_path" default="/home/nbore/mongodb_store"/>
    <arg name="test" default="false"/>
    <arg name="number_targets" default="2"/>
    <arg name="config" default="moving_objects"/>
    <arg name="db_name" default="somadata"/>
    <arg name="feature_dim" default="4"/>
    <arg name="step_by_timestep" default="true"/>
    <arg name="publish_maps" default="true"/>
    <!-- <arg name="smoother" default="false"/> -->

    <include file="$(find mongodb_store)/launch/mongodb_store.launch">
        <arg name="db_path" value="$(arg db_path)"/>
        <arg name="port" value="62345"/>
    </include>

    <node pkg="map_server" type="map_server" name="map_server" args="$(arg map)"/>

    <node pkg="rbpf_mtt" type="test_map_server.py" name="test_map_server" output="screen" respawn="true" if="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>
    <!-- TODO: figure out how to launch this conditionally
    <node pkg="rbpf_mtt" type="test_filter.py" name="test_filter" output="screen" respawn="true" unless="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>
    -->
    <node pkg="rbpf_mtt" type="test_smoother.py" name="test_smoother" output="screen" respawn="true" unless="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="publish_maps" value="$(arg publish_maps)"/>
    </node>
    <node pkg="rbpf_mtt" type="smoother_server.py" name="smoother_server" output="screen" respawn="true" unless="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="feature_dim" value="$(arg feature_dim)"/>
        <param name="step_by_timestep" value="$(arg step_by_timestep)"/>
    </node>

    <node pkg="rbpf_mtt" type="measurement_simulator" name="measurement_simulator" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="feature_dim" value="$(arg feature_dim)"/>
    </node>

    <node pkg="rbpf_mtt" type="gmm_map_server" name="gmm_map_server" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>

    <node pkg="rbpf_mtt" type="measurement_vis_server.py" name="measurement_vis_server" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>

    <!-- <node pkg="rbpf_mtt" type="test_filter.py" name="test_filter"/> -->

    <!-- Service: configs -->
    <!-- <node= pkg="soma_roi" type="soma_roi_drawer.py" name="soma_roi_drawer"/> -->

    <!-- Query ROI service -->
    <!-- <node= pkg="soma_roi" type="soma_manager.py" name="soma_manager"/> -->


    <node pkg="soma_map_manager" type="soma_map_manager_node.py" name="soma_map_manager" args="--mapname $(arg config)" output="screen"/>
    <node pkg="soma_manager" name="soma_query_manager_node" type="soma_query_manager_node" args="$(arg db_name) $(arg config) $(arg db_name) roi" output="screen"/>
    <node pkg="soma_roi_manager" type="soma_roi_node.py" name="soma_roi_node" args="--db_name somadata --collection_name roi $(arg config)" output="screen"/>
    <node pkg="soma_manager" type="data_manager_node.py" name="data_manager_node" args="--object_collection_name $(arg config) --object_db_name $(arg db_name)"/>

</launch>
