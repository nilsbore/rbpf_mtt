<launch>

    <arg name="map"/>
    <arg name="data_path"/>

    <arg name="db_path" default="/home/nbore/mongodb_store"/>
    <arg name="test" default="false"/>
    <arg name="number_targets" default="7"/>
    <arg name="number_noise" default="2"/>
    <arg name="config" default="moving_objects"/>
    <!-- <arg name="db_name" default="somadata"/> -->
    <arg name="db_name" default="chairdata"/>
    <arg name="feature_dim" default="3"/>
    <arg name="step_by_timestep" default="true"/>
    <arg name="publish_maps" default="true"/>
    <arg name="number_particles" default="300"/>
    <arg name="spatial_std" default="0.15"/>
    <arg name="spatial_process_std" default="0.35"/>
    <arg name="feature_std" default="6.0"/>
    <arg name="discrim_factor" default="2.0"/>
    <arg name="is_init" default="true"/>
    <arg name="color_clouds" default="true"/>
    <arg name="filter_location_clouds" default=""/>
    <!-- <arg name="data_path" default="$(find rbpf_processing)/data"/> -->

    <arg name="pjump" default="0.05"/>
    <arg name="pnone" default="0.02"/>
    <arg name="location_area" default="20.0"/>
    <arg name="use_gibbs" default="false"/>
    <arg name="number_locations" default="2"/>

    <arg name="filter_maps" default=""/>

    <!-- <arg name="smoother" default="false"/> -->

    <include file="$(find mongodb_store)/launch/mongodb_store.launch">
        <arg name="db_path" value="$(arg db_path)"/>
        <arg name="port" value="62345"/>
    </include>

    <node pkg="map_server" type="map_server" name="map_server" args="$(arg map)"/>

    <node pkg="rbpf_mtt" type="test_map_server.py" name="test_map_server" output="screen" respawn="true" if="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>
    <!-- TODO: figure out how to launch this conditionally
    <node pkg="rbpf_mtt" type="test_filter.py" name="test_filter" output="screen" respawn="true" unless="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
    </node>
    -->
    <node pkg="rbpf_mtt" type="test_smoother.py" name="test_smoother" output="screen" respawn="false" unless="$(arg test)">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="publish_maps" value="$(arg publish_maps)"/>
        <param name="spatial_std" value="$(arg spatial_std)"/>
        <param name="spatial_process_std" value="$(arg spatial_process_std)"/>
        <param name="feature_std" value="$(arg feature_std)"/>
        <param name="feature_dim" value="$(arg feature_dim)"/>
        <param name="number_particles" value="$(arg number_particles)"/>
        <!-- <param name="data_path" value="$(arg data_path)"/> -->
        <param name="pjump" value="$(arg pjump)"/>
        <param name="pnone" value="$(arg pnone)"/>
        <param name="location_area" value="$(arg location_area)"/>
        <param name="use_gibbs" value="$(arg use_gibbs)"/>
        <param name="number_locations" value="$(arg number_locations)"/>
    </node>
    <node pkg="rbpf_mtt" type="smoother_server.py" name="smoother_server" output="screen" respawn="true" unless="$(arg test)">
        <param name="data_path" value="$(arg data_path)"/>
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="feature_dim" value="$(arg feature_dim)"/>
        <param name="feature_measurement_std" value="$(arg feature_std)"/>
        <param name="step_by_timestep" value="$(arg step_by_timestep)"/>
        <param name="is_init" value="$(arg is_init)"/>
        <param name="filter_location_clouds" value="$(arg filter_location_clouds)" type="str"/>
    </node>

    <node pkg="rbpf_mtt" type="measurement_simulator" name="measurement_simulator" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="feature_dim" value="$(arg feature_dim)"/>
        <param name="spatial_std" value="$(arg spatial_std)"/>
        <param name="feature_std" value="$(arg feature_std)"/>
        <param name="discrim_factor" value="$(arg discrim_factor)"/>
    </node>

    <node pkg="rbpf_mtt" type="gmm_map_server" name="gmm_map_server" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="filter_maps" value="$(arg filter_maps)"/>
    </node>
    <node pkg="rbpf_mtt" type="gmm_map_server" name="gmm_smoother_map_server" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="namespace" value="smoother_"/>
        <param name="filter_maps" value="$(arg filter_maps)"/>
    </node>

    <node pkg="rbpf_mtt" type="measurement_vis_server.py" name="measurement_vis_server" output="screen" respawn="true">
        <param name="number_targets" value="$(arg number_targets)"/>
        <param name="number_noise" value="$(arg number_noise)"/>
    </node>

    <include file="$(find rbpf_processing)/launch/cloud_observation_loader.launch">
        <arg name="color_clouds" value="$(arg color_clouds)"/>
    </include>

    <!-- <node pkg="rbpf_mtt" type="test_filter.py" name="test_filter"/> -->

    <!-- Service: configs -->
    <!-- <node= pkg="soma_roi" type="soma_roi_drawer.py" name="soma_roi_drawer"/> -->

    <!-- Query ROI service -->
    <!-- <node= pkg="soma_roi" type="soma_manager.py" name="soma_manager"/> -->


    <node pkg="soma_map_manager" type="soma_map_manager_node.py" name="soma_map_manager" args="--mapname $(arg config)" output="screen"/>
    <node pkg="soma_manager" name="soma_query_manager_node" type="soma_query_manager_node" args="$(arg db_name) $(arg config) $(arg db_name) roi" output="screen"/>
    <node pkg="soma_roi_manager" type="soma_roi_node.py" name="soma_roi_node" args="--db_name somadata --collection_name roi $(arg config)" output="screen"/>
    <node pkg="soma_manager" type="data_manager_node.py" name="data_manager_node" args="--object_collection_name $(arg config) --object_db_name $(arg db_name)"/>

</launch>
